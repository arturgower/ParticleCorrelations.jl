var documenterSearchIndex = {"docs":
[{"location":"library/library/#Base","page":"Library","title":"Base","text":"","category":"section"},{"location":"library/library/","page":"Library","title":"Library","text":"CurrentModule = ParticleCorrelations","category":"page"},{"location":"library/library/#All-types","page":"Library","title":"All types","text":"","category":"section"},{"location":"library/library/","page":"Library","title":"Library","text":"Modules = [ParticleCorrelations]\nOrder   = [:function, :constant, :type]","category":"page"},{"location":"library/library/#ParticleCorrelations.gls_pair_radial_fun-Union{Tuple{T}, Tuple{Union{Function, AbstractArray}, T}} where T","page":"Library","title":"ParticleCorrelations.gls_pair_radial_fun","text":"gls_pair_radial_fun(pair_corr_distance::Function, a12::T; polynomial_order::Int, mesh_size::Int)\n\nReturn a function gls_fun. For any radial distances r1 and r2 we have gls = gls_fun(r1,r2) where gls is an array of the Legendre coefficients for the pair correlation.\n\nUsing mathematics, we have that such that g(r_1r_2cos theta_12) = sum_ell_1 =0 frac2ell_1 + 14pi glsells+1 P_ell_1(cos theta_12), where g(r_1r_2cos theta_12) is the radially symmetric pair-correlation, so it depends only on the radial distances r_1 and r_2, and the angle between two position vectors theta_12.\n\nThe function gls_fun is calculated from the function pair_corr_distance, where pair_corr_distance(sqrt(r1^2 + r2^2 - 2r1 * r2 * cos(θ12))) gives the pair correlation.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#ParticleCorrelations.number_density-Tuple{Specie}","page":"Library","title":"ParticleCorrelations.number_density","text":"number_density(s::Specie)\n\nGives the number of particles per unit volume. Note this is given exactly by N / V where V is the volume of the region containing the origins of all particles. For consistency, volume_fraction is given by N * volume(s) / V.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#ParticleCorrelations.pair_radial_fun-Union{Tuple{T}, Tuple{Function, T}} where T","page":"Library","title":"ParticleCorrelations.pair_radial_fun","text":"pair_radial_fun(pair_corr::Function, a12::T; polynomial_order::Int, mesh_size::Int)\n\nReturn a function pair_radial such that pair_radial(r1,r2, cos(θ12)) gives the pair correlation particles at the radial distances r1 and r2, with and angle of θ12 between them.\n\nThe function pair_radial is calculated from the function pair_corr_distance, where pair_corr_distance(sqrt(r1^2 + r2^2 - 2r1 * r2 * cos(θ12))) gives the pair correlation.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#ParticleCorrelations.volume_fraction-Tuple{Specie}","page":"Library","title":"ParticleCorrelations.volume_fraction","text":"Returns the volume fraction of the specie.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#ParticleCorrelations.DiscretePairCorrelation","page":"Library","title":"ParticleCorrelations.DiscretePairCorrelation","text":"DiscretePairCorrelation\n\nRepresents the pair correlation between two types of species, which could be the same.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#ParticleCorrelations.DiscretePairCorrelation-Union{Tuple{Dim}, Tuple{T}, Tuple{Vector{v} where v<:AbstractVector{T}, AbstractVector{T}, MonteCarloPairCorrelation{Dim}}} where {T, Dim}","page":"Library","title":"ParticleCorrelations.DiscretePairCorrelation","text":"DiscretePairCorrelation(particle_centres::Vector, R::T, MonteCarloPairCorrelation{Dim}())\n\nCalculates the isotropic pair correlation from one configuration of particles. To use many configurations of particles, call this function for each, then take the average of the pair-correlation.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#ParticleCorrelations.DiscretePairCorrelation-Union{Tuple{PT}, Tuple{T}, Tuple{Dim}, Tuple{Specie{Dim, P} where P<:AbstractParticle{Dim}, PT}} where {Dim, T<:AbstractFloat, PT<:PairCorrelationType}","page":"Library","title":"ParticleCorrelations.DiscretePairCorrelation","text":"DiscretePairCorrelation(s::Specie, pairtype::PercusYevick, distances::AbstractVector)\n\nGenerates a DiscretePairCorrelation for the specie s by using the Percus-Yevick approximation. This distribution assumes particles are distributed accoriding to a random uniform distribution, and that particles can not overlap.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#ParticleCorrelations.HardMedium","page":"Library","title":"ParticleCorrelations.HardMedium","text":"HardMedium\n\nRepresents a solid type of material. Solid particles can not overlap. Currently the package has no soft medium, but this can easily be added.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#ParticleCorrelations.MonteCarloPairCorrelation","page":"Library","title":"ParticleCorrelations.MonteCarloPairCorrelation","text":"MonteCarloPairCorrelation{Dim} <: PairCorrelationType\n\nCurrently only used to create pair-correlations for particles that are uniformly randomly placed, except they can not overlap.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#ParticleCorrelations.PairCorrelation","page":"Library","title":"ParticleCorrelations.PairCorrelation","text":"PairCorrelation\n\nA type used to store a pair-correlation. This represents the calculated pair-correlation.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#ParticleCorrelations.PairCorrelationType","page":"Library","title":"ParticleCorrelations.PairCorrelationType","text":"PairCorrelationType\n\nA type used to specify what type of pair correlation is to be used. This is like a tag, or a option, to specify which pair correlation is wanted.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#ParticleCorrelations.Specie","page":"Library","title":"ParticleCorrelations.Specie","text":"Specie\n\nRepresents a set of particles which are all the same. The type of particle is given by Specie.particle and the volume fraction this specie occupies is given by Specie.volume_fraction.\n\nWe can use Specie.numberofparticles to specify the number of particles, otherwise for an infinite Specie.numberofparticles = Inf.\n\nThe minimum distance between any two particles will equal outer_radius(Specie) * Specie.separation_ratio.\n\n\n\n\n\n","category":"type"},{"location":"#ParticleCorrelations.jl","page":"ParticleCorrelations.jl","title":"ParticleCorrelations.jl","text":"","category":"section"},{"location":"","page":"ParticleCorrelations.jl","title":"ParticleCorrelations.jl","text":"A Julia library to calculate pair correlations (or Structure factors) for disordered particulates, and calculate particle configurations from pair correlations.","category":"page"},{"location":"#Installation","page":"ParticleCorrelations.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"ParticleCorrelations.jl","title":"ParticleCorrelations.jl","text":"Install Julia v1.0 or later, then run","category":"page"},{"location":"","page":"ParticleCorrelations.jl","title":"ParticleCorrelations.jl","text":"] # to enter the package mode\nadd ParticleCorrelations","category":"page"},{"location":"","page":"ParticleCorrelations.jl","title":"ParticleCorrelations.jl","text":"Press backspace to exit the package mode.","category":"page"},{"location":"#Contents","page":"ParticleCorrelations.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"ParticleCorrelations.jl","title":"ParticleCorrelations.jl","text":"Depth = 2","category":"page"}]
}
